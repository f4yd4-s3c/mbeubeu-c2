package syscalls

import (
	"unsafe"

	"golang.org/x/sys/windows"
)

var (
	modadvapi32 = windows.NewLazySystemDLL("advapi32.dll")

	procLogonUserW           = modadvapi32.NewProc("LogonUserW")
	procImpersonateLoggedOnUser = modadvapi32.NewProc("ImpersonateLoggedOnUser")
	procOpenProcessToken     = modadvapi32.NewProc("OpenProcessToken")
	procLookupPrivilegeNameW = modadvapi32.NewProc("LookupPrivilegeNameW")
	procCreateProcessWithTokenW = modadvapi32.NewProc("CreateProcessWithTokenW")
)

const (
	TOKEN_QUERY          = 0x0008
	TOKEN_ADJUST_PRIVILEGES = 0x0020
)

func LookupPrivilegeName(systemName *uint16, luid *windows.LUID, nameBuffer *uint16, nameLen *uint32) error {
	r1, _, err := procLookupPrivilegeNameW.Call(
		uintptr(unsafe.Pointer(systemName)),
		uintptr(unsafe.Pointer(luid)),
		uintptr(unsafe.Pointer(nameBuffer)),
		uintptr(unsafe.Pointer(nameLen)),
	)
	if r1 == 0 {
		return err
	}
	return nil
}


func LogonUser(username *uint16, domain *uint16, password *uint16, logonType uint32, logonProvider uint32, token *windows.Token) error {
	r1, _, err := procLogonUserW.Call(
		uintptr(unsafe.Pointer(username)),
		uintptr(unsafe.Pointer(domain)),
		uintptr(unsafe.Pointer(password)),
		uintptr(logonType),
		uintptr(logonProvider),
		uintptr(unsafe.Pointer(token)),
	)
	if r1 == 0 {
		return err
	}
	return nil
}

func ImpersonateLoggedOnUser(token windows.Token) error {
	r1, _, err := procImpersonateLoggedOnUser.Call(uintptr(token))
	if r1 == 0 {
		return err
	}
	return nil
}

func OpenProcessToken(hProcess windows.Handle, desiredAccess uint32, token *windows.Token) error {
	r1, _, err := procOpenProcessToken.Call(
		uintptr(hProcess),
		uintptr(desiredAccess),
		uintptr(unsafe.Pointer(token)),
	)
	if r1 == 0 {
		return err
	}
	return nil
}

func CreateProcessWithTokenW(
    hToken windows.Token,
    dwLogonFlags uint32,
    lpApplicationName *uint16,
    lpCommandLine *uint16,
    dwCreationFlags uint32,
    lpEnvironment *uint16,
    lpCurrentDirectory *uint16,
    lpStartupInfo *windows.StartupInfo,
    lpProcessInfo *windows.ProcessInformation,
) error {
    r1, _, err := procCreateProcessWithTokenW.Call(
        uintptr(hToken),
        uintptr(dwLogonFlags),
        uintptr(unsafe.Pointer(lpApplicationName)),
        uintptr(unsafe.Pointer(lpCommandLine)),
        uintptr(dwCreationFlags),
        uintptr(unsafe.Pointer(lpEnvironment)),
        uintptr(unsafe.Pointer(lpCurrentDirectory)),
        uintptr(unsafe.Pointer(lpStartupInfo)),
        uintptr(unsafe.Pointer(lpProcessInfo)),
    )
    if r1 == 0 {
        return err
    }
    return nil
}


// 
